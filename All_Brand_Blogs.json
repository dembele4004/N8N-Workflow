{
  "name": "All_Brand_Blogs",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX"
            }
          ]
        }
      },
      "id": "5b3621b8-1b00-4684-b025-f57398a0a339",
      "name": "Cron (every 2h)1",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -5072,
        -4
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI",
          "mode": "list",
          "cachedResultName": "All_Brand_blogs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "status",
              "lookupValue": "No"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4848,
        -4
      ],
      "id": "fbb319a3-e5b4-4d8f-a4d4-58bf84ca1085",
      "name": "Get row(s) in sheet",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4624,
        -4
      ],
      "id": "87cc2c50-dd9d-4cce-bfdb-15b2e1ece595",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{ $json.BlogURL }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4400,
        -512
      ],
      "id": "61c733ee-f34c-4a2d-bca1-0d6f07ef28dc",
      "name": "HTTP Request2",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3656,
        -300
      ],
      "id": "6e024fab-76bd-4465-8e73-f96cc0eeba00",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "OvzWazpUQAPU8BZ9",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"section post-body\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -1376
      ],
      "id": "eed9636d-98f7-4a28-8b99-ca30de4cebe5",
      "name": "Grandstream"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"blog-con\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Vérifier si src est en base64\n        if src and src.startswith(\"data:\"):\n            img.decompose()  # Supprime l'image si base64\n            continue\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -1184
      ],
      "id": "0c3bd620-7d9c-44c4-a1e2-61405cd921d8",
      "name": "Flyingvoice"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\nimport html\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML principal\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le titre\ntitle = soup.title.string if soup.title else None\n\n# Trouver la div contenant l'attribut data-content\ndiv = soup.find('div', id='detail-blog')\n\nbody = None\n\nif div:\n    # Déséchapper le contenu HTML de data-content\n    data_content_html = html.unescape(div.get('data-content', ''))\n    content_soup = BeautifulSoup(data_content_html, \"html.parser\")\n\n    # Supprimer les styles inutiles\n    for style_tag in content_soup.find_all(\"style\"):\n        style_tag.decompose()\n\n    # Vérifier s'il y a une vidéo dans un script\n    video_found = False\n    for script_tag in content_soup.find_all(\"script\"):\n        if script_tag.string and 'video' in script_tag.string:\n            # Extraire la balise <video> depuis le script\n            video_soup = BeautifulSoup(script_tag.string, \"html.parser\")\n            video_tag = video_soup.find(\"video\")\n            if video_tag:\n                video_found = True\n                # Créer le conteneur video\n                container = content_soup.new_tag(\"div\", **{\"class\": \"video-container-yealink\"})\n                container.append(video_tag)\n                \n                # Remplacer le script par le conteneur\n                script_tag.replace_with(container)\n            else:\n                script_tag.decompose()\n        else:\n            script_tag.decompose()\n\n    # Si aucune vidéo, garder le reste du HTML\n    body = content_soup.decode_contents()\n\n# Retourner le résultat\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -992
      ],
      "id": "206853c5-b5e5-4e36-899a-f60a8e288475",
      "name": "Yealink"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"about-dt\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Supprimer le div avec la classe \"btn\"\n    btn_div = post_body_div.find(\"div\", class_=\"btn\")\n    if btn_div:\n        btn_div.decompose()  # Cela supprime le div \"btn\" et son contenu\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Vérifier si src est en base64\n        if src and src.startswith(\"data:\"):\n            img.decompose()  # Supprime l'image si base64\n            continue\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -800
      ],
      "id": "b1626212-8735-4ef2-9fa0-5477038f7a6b",
      "name": "Fanvil"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"solu_chara_in solu_in\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -608
      ],
      "id": "201f3679-7e32-4d7f-a74b-56516a2090db",
      "name": "Dinstar"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"sui-section sui-flex sui-flex-col is-style-size-m sui-gap-xl\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -416
      ],
      "id": "6412f787-cca8-4b00-b324-1a0b26f43b8b",
      "name": "Sangoma"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"container t3-mainbody\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = \"https://www.openvoxtech.com\"+src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -224
      ],
      "id": "62dc7d5b-aefa-488c-a710-ea453cc4cc04",
      "name": "OpenVox"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"entry clr blog-page-entry\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        160
      ],
      "id": "5b903cad-18a4-494e-a8b8-8d7952cb5e14",
      "name": "Yeastar"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog\npost_body_div = soup.find(\"div\", class_=\"post-content\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        -32
      ],
      "id": "fa3ebe76-dad2-4e8f-bab9-f082194082fd",
      "name": "3CX"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"container\")\nright = post_body_div.find(\"div\", class_=\"right\")\n\nif right:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in right.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in right.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = right.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3952,
        352
      ],
      "id": "12cb20cb-5677-400e-9893-c99ac8ef359b",
      "name": "Milesight"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "grandstream",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "293adc99-bf8d-4947-95b4-7ab2a3e72c5e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Grandstream"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8e2e7110-c595-4d35-8d50-97c1399ba111",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "flyingvoice",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Flyingvoice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ec05c4f9-7f10-4253-9e5b-ba833f096a55",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "yealink",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yealink"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b123c48-0872-41ee-a89d-14ca55864f14",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "fanvil",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Fanvil"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fad3f385-5b25-447f-89b9-e7b4c4533717",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "dinstar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dinstar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "50b347a9-9f3f-401a-b294-54b60154ecc9",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "sangoma",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sangoma"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d34614bc-6d59-457e-933a-54ce7994efed",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "openvox",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "OpenVox"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cf3df107-f45e-47b6-a168-03ec757e938d",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "yeastar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yeastar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2a2568f6-54d3-4b79-a729-83db726c01a7",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "3cx",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "3CX"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61169945-898a-4882-83b7-1e10ff1ae661",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "milesight",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Milesight"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4176,
        -640
      ],
      "id": "a7ed20ec-4c23-46fb-a1a8-1ec796af5789",
      "name": "Switch2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body }}",
        "options": {
          "systemMessage": "=Tu es un agent de marketing expert en rédaction web technique et SEO, très expérimenté dans la création de blogs impactants.\n\nTon rôle est de reformuler complètement cet article de blog {{ $json.body }} sous forme structurée, pour le republier sur notre propre plateforme d’entreprise.\n\n⚠️ Consignes impératives :\n\nFournir uniquement du HTML propre et sémantique, prêt à être publié, sans markdown ni sauts de ligne (\\n).\n\nLe contenu doit être entièrement reformulé avec tes propres mots, aucun copier-coller.\n\nUtiliser un langage professionnel, clair et adapté à un public B2B.\n\nRespecter une structure stricte :\n\n<h1> pour le titre principal\n\n<h2> pour les sous-titres\n\n<p> pour les paragraphes explicatifs\n\n<ul> / <ol> pour les listes\n\n<strong> pour les mots-clés importants\n\nSupprimer toute référence à la marque d’origine, à ses produits ou à ses vidéos.\n\nConserver les images uniquement sous forme de balises <img> avec un attribut alt pertinent et la dimension si disponible (width, height).\n\nAjouter un call-to-action clair à la fin, par exemple :\n<p><strong>Contactez Ennova Group</strong> pour transformer vos projets en réussites concrètes.</p>\n\nLe HTML généré doit être continu, sans retour à la ligne, prêt à être utilisé directement via une API WordPress.\n\n🎯 Objectif final :\nObtenir un article complet et structuré en HTML pur, au format similaire à l’exemple ci-dessous :\n<h1>Titre du blog reformulé</h1><p>Introduction reformulée et claire.</p><h2>Sous-titre 1</h2><p>Paragraphe explicatif avec <strong>mots-clés importants</strong>.</p><ul><li>Point clé 1</li><li>Point clé 2</li></ul><h2>Sous-titre 2</h2><p>Paragraphe explicatif...</p><img src=\"url-image.jpg\" alt=\"Description pertinente\" width=\"1200\" height=\"628\"><h2>Conclusion</h2><p>Résumé et transition vers l'appel à l'action.</p><p><strong>Contactez Ennova Group</strong> pour transformer vos projets en réussites concrètes.</p>\n\nGarde la langue originale du blog : {{ $json.body }}; si c'est en anglais le blog doit etre en anglais. Si c'est en français le blog doit etre en français . Sinon si c'est une autre langue le blog doit etre en anglais.\nSi le blog {{ $json.body }} contient de balise video alors garde bien la video dans le output \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -3728,
        -524
      ],
      "id": "3ad1feb4-cf12-4d66-b9fd-1cbb21291331",
      "name": "AI Agent4",
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI",
          "mode": "list",
          "cachedResultName": "All_Brand_blogs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Feuille 1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14POmiGDqpTuGV1tBlyxcOOPcRAGT70T3HBbPfvaelpI/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "BlogURL": "={{ $('Get row(s) in sheet').item.json.BlogURL }}",
            "status": "Yes",
            "Blog_content": "={{ $json.output }}"
          },
          "matchingColumns": [
            "BlogURL"
          ],
          "schema": [
            {
              "id": "BlogURL",
              "displayName": "BlogURL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Blog_content",
              "displayName": "Blog_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Published",
              "displayName": "Published",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3376,
        -4
      ],
      "id": "d1a963e6-4467-4dde-b0dd-7e8c917ec76b",
      "name": "Update row in sheet",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron (every 2h)1": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Grandstream": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Grandstream",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Flyingvoice",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Yealink",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fanvil",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dinstar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sangoma",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenVox",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Yeastar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "3CX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Milesight",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flyingvoice": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fanvil": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dinstar": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sangoma": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenVox": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Yeastar": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3CX": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Milesight": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Yealink": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ed8074e2-6be0-4455-a4d6-8d8b79623e5e",
  "meta": {
    "instanceId": "612674cd98977dc74567f02f7faaa4bea41829545d73644a2be3b3d2e77ca778"
  },
  "id": "wYfST18OXknCBSjv",
  "tags": []
}