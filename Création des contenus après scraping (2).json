{
  "name": "Création des contenus après scraping",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX"
            }
          ]
        }
      },
      "id": "9a2b9904-b847-4d6a-b1ef-d2a9fc6213c9",
      "name": "Cron (every 2h)1",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -5024,
        -15228
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4800,
        -15228
      ],
      "id": "14d5a074-a554-4976-b948-2bebdf67d1f8",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4576,
        -15228
      ],
      "id": "e9ca6a57-8b26-42d0-9e6d-eaedecf4d35b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.scrapping }}",
                    "rightValue": "rss",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "293adc99-bf8d-4947-95b4-7ab2a3e72c5e"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8e2e7110-c595-4d35-8d50-97c1399ba111",
                    "leftValue": "={{ $json.scrapping }}",
                    "rightValue": "http",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -4352,
        -15588
      ],
      "id": "fad173ba-29fc-48e6-a557-c9cd9631321a",
      "name": "Switch"
    },
    {
      "parameters": {
        "url": "={{ $json['RSS/Feed URL'] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -3904,
        -16012
      ],
      "id": "2a644e82-db03-4315-a5c2-e21f97f7a3ab",
      "name": "RSS Read1"
    },
    {
      "parameters": {
        "url": "={{ $json['Blog/News URL'] }}",
        "options": {
          "redirect": {
            "redirect": {
              "maxRedirects": 1000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4128,
        -14740
      ],
      "id": "8bee5bde-b6f9-4c19-9e8a-a83dc7eb9609",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "={{ $('If').item.json.Link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3008,
        -14412
      ],
      "id": "c7ab2bd0-fb6a-431a-be14-3b9c1c778f10",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2264,
        -16308
      ],
      "id": "4888662a-a67a-46ee-b564-1d151583ed14",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "OvzWazpUQAPU8BZ9",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"section post-body\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -17344
      ],
      "id": "6f873943-8a98-43ae-b2d9-c659506475be",
      "name": "Grandstream"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"blog-con\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Vérifier si src est en base64\n        if src and src.startswith(\"data:\"):\n            img.decompose()  # Supprime l'image si base64\n            continue\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -17152
      ],
      "id": "b35a4ef0-a436-449f-aedb-08ae28ca8e38",
      "name": "Flyingvoice"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\nimport html\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML principal\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le titre\ntitle = soup.title.string if soup.title else None\n\n# Trouver la div contenant l'attribut data-content\ndiv = soup.find('div', id='detail-blog')\n\nbody = None\n\nif div:\n    # Déséchapper le contenu HTML de data-content\n    data_content_html = html.unescape(div.get('data-content', ''))\n    content_soup = BeautifulSoup(data_content_html, \"html.parser\")\n\n    # Supprimer les styles inutiles\n    for style_tag in content_soup.find_all(\"style\"):\n        style_tag.decompose()\n\n    # Vérifier s'il y a une vidéo dans un script\n    video_found = False\n    for script_tag in content_soup.find_all(\"script\"):\n        if script_tag.string and 'video' in script_tag.string:\n            # Extraire la balise <video> depuis le script\n            video_soup = BeautifulSoup(script_tag.string, \"html.parser\")\n            video_tag = video_soup.find(\"video\")\n            if video_tag:\n                video_found = True\n                # Créer le conteneur video\n                container = content_soup.new_tag(\"div\", **{\"class\": \"video-container-yealink\"})\n                container.append(video_tag)\n                \n                # Remplacer le script par le conteneur\n                script_tag.replace_with(container)\n            else:\n                script_tag.decompose()\n        else:\n            script_tag.decompose()\n\n    # Si aucune vidéo, garder le reste du HTML\n    body = content_soup.decode_contents()\n\n# Retourner le résultat\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16960
      ],
      "id": "bdb176a2-ea43-43f1-a60e-98ca72b8ce33",
      "name": "Yealink"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"about-dt\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Supprimer le div avec la classe \"btn\"\n    btn_div = post_body_div.find(\"div\", class_=\"btn\")\n    if btn_div:\n        btn_div.decompose()  # Cela supprime le div \"btn\" et son contenu\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Vérifier si src est en base64\n        if src and src.startswith(\"data:\"):\n            img.decompose()  # Supprime l'image si base64\n            continue\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16768
      ],
      "id": "9e486554-761a-47c7-9b6a-3f0925171944",
      "name": "Fanvil"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"solu_chara_in solu_in\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16576
      ],
      "id": "72ed482d-482b-4bf6-997d-c68b3e073f47",
      "name": "Dinstar"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"sui-section sui-flex sui-flex-col is-style-size-m sui-gap-xl\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16384
      ],
      "id": "961861e3-9862-4a77-b8cc-cdecec40a6dc",
      "name": "Sangoma"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"container t3-mainbody\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = \"https://www.openvoxtech.com\"+src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16192
      ],
      "id": "97aedc26-b51c-486f-be93-98e444fcb796",
      "name": "OpenVox"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"entry clr blog-page-entry\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -15808
      ],
      "id": "ce917bb4-ec33-4aad-b2af-b5c36775188c",
      "name": "Yeastar"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog\npost_body_div = soup.find(\"div\", class_=\"post-content\")\n\nif post_body_div:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in post_body_div.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in post_body_div.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = post_body_div.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -16000
      ],
      "id": "86ce4606-48a7-482e-9eee-68bc052b4202",
      "name": "3CX"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Récupérer le champ \"data\" de l'input JSON\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parser le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\n# Extraire le <title>\ntitle = soup.title.string if soup.title else None\n\n# Extraire le <body>\n# body = soup.body.get_text(separator=\"\\n\", strip=True) if soup.body else None\n\nbody = soup.body.decode_contents() if soup.body else None\n\n# Récupérer le contenu du blog (dans le div.section.post-body)\npost_body_div = soup.find(\"div\", class_=\"container\")\nright = post_body_div.find(\"div\", class_=\"right\")\n\nif right:\n    # Supprimer toutes les balises <script> et <style>\n    for tag in right.find_all([\"script\", \"style\"]):\n        tag.decompose()\n\n    # Pour chaque image, on ne garde que src, width, height\n    for img in right.find_all(\"img\"):\n        src = img.get(\"src\")\n        width = img.get(\"width\")\n        height = img.get(\"height\")\n\n        # Supprimer tous les attributs\n        img.attrs = {}\n\n        # Réinjecter seulement ce qu’on veut\n        if src:\n            img[\"src\"] = src\n        if width:\n            img[\"width\"] = width\n        if height:\n            img[\"height\"] = height\n    # Garder le contenu HTML interne du div\n    body = right.decode_contents()\nelse:\n    body = None\n# Retourner les résultats\nreturn [{\n    \"json\": {\n        \"title\": title,\n        \"body\": body\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2560,
        -15616
      ],
      "id": "f7a8bf84-e71b-4132-8f58-3b8cca0db5b8",
      "name": "Milesight"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Grandstream",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "293adc99-bf8d-4947-95b4-7ab2a3e72c5e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Grandstream"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8e2e7110-c595-4d35-8d50-97c1399ba111",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Flyingvoice",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Flyingvoice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ec05c4f9-7f10-4253-9e5b-ba833f096a55",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Yealink",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yealink"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b123c48-0872-41ee-a89d-14ca55864f14",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Fanvil",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Fanvil"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fad3f385-5b25-447f-89b9-e7b4c4533717",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Dinstar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dinstar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "50b347a9-9f3f-401a-b294-54b60154ecc9",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Sangoma",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sangoma"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d34614bc-6d59-457e-933a-54ce7994efed",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "OpenVox",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "OpenVox"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cf3df107-f45e-47b6-a168-03ec757e938d",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Yeastar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yeastar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2a2568f6-54d3-4b79-a729-83db726c01a7",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "3CX",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "3CX"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "61169945-898a-4882-83b7-1e10ff1ae661",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Milesight",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Milesight"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2784,
        -16608
      ],
      "id": "9a7385a5-c1be-4845-bf79-4ec76a695a13",
      "name": "Switch2"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Fanvil",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "47f66fd7-10d7-4a21-82af-5f6416b3685b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Fanvil"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f5fd443b-34bf-4e4a-a9d6-3b01d76aebd3",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Flyingvoice",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Flyingvoice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ef5370a8-c741-4949-bb30-95c74045e706",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Dinstar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Dinstar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e25d938c-7e8a-4f10-aa53-2662fe150ecd",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Milesight",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Milesight"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "900b7e17-f31f-413c-856c-d4faa48edee0",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Yealink",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Yealink"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b7aa2f5-37d9-4f89-bede-763e499cbbbd",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "Grandstream",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Grandstream"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "13bad872-2752-443c-ad9e-ba731cdd7266",
                    "leftValue": "={{ $('Get row(s) in sheet').item.json.Brand }}",
                    "rightValue": "3CX",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3904,
        -14820
      ],
      "id": "cfaf1d88-d076-4809-a2df-528adaa5d2d1",
      "name": "Switch3"
    },
    {
      "parameters": {
        "url": "={{ $('RSS Read1').item.json.link }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3008,
        -16480
      ],
      "id": "06c25f64-c242-409e-b951-be4afa9e655d",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body }}",
        "options": {
          "systemMessage": "=Tu es un agent de marketing expert en rédaction web technique et SEO, très expérimenté dans la création de blogs impactants.\n\nTon rôle est de reformuler complètement cet article de blog {{ $json.body }} sous forme structurée, pour le republier sur notre propre plateforme d’entreprise.\n\n⚠️ Consignes impératives :\n\nFournir uniquement du HTML propre et sémantique, prêt à être publié, sans markdown ni sauts de ligne (\\n).\n\nLe contenu doit être entièrement reformulé avec tes propres mots, aucun copier-coller.\n\nUtiliser un langage professionnel, clair et adapté à un public B2B.\n\nRespecter une structure stricte :\n\n<h1> pour le titre principal\n\n<h2> pour les sous-titres\n\n<p> pour les paragraphes explicatifs\n\n<ul> / <ol> pour les listes\n\n<strong> pour les mots-clés importants\n\nSupprimer toute référence à la marque d’origine, à ses produits ou à ses vidéos.\n\nConserver les images uniquement sous forme de balises <img> avec un attribut alt pertinent et la dimension si disponible (width, height).\n\nAjouter un call-to-action clair à la fin, par exemple :\n<p><strong>Contactez Ennova Group</strong> pour transformer vos projets en réussites concrètes.</p>\n\nLe HTML généré doit être continu, sans retour à la ligne, prêt à être utilisé directement via une API WordPress.\n\n🎯 Objectif final :\nObtenir un article complet et structuré en HTML pur, au format similaire à l’exemple ci-dessous :\n<h1>Titre du blog reformulé</h1><p>Introduction reformulée et claire.</p><h2>Sous-titre 1</h2><p>Paragraphe explicatif avec <strong>mots-clés importants</strong>.</p><ul><li>Point clé 1</li><li>Point clé 2</li></ul><h2>Sous-titre 2</h2><p>Paragraphe explicatif...</p><img src=\"url-image.jpg\" alt=\"Description pertinente\" width=\"1200\" height=\"628\"><h2>Conclusion</h2><p>Résumé et transition vers l'appel à l'action.</p><p><strong>Contactez Ennova Group</strong> pour transformer vos projets en réussites concrètes.</p>\n\nGarde la langue originale du blog : {{ $json.body }}; si c'est en anglais le blog doit etre en anglais. Si c'est en français le blog doit etre en français . Sinon si c'est une autre langue le blog doit etre en anglais.\nSi le blog {{ $json.body }} contient de balise video alors garde bien la video dans le output \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -2336,
        -16532
      ],
      "id": "e30adce1-b03e-48de-ac91-a6ee29f144c6",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet').item.json.Brand }}",
            "content fetched": "={{ $('AI Agent4').item.json.output }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1984,
        -16532
      ],
      "id": "9f86d518-4e39-4aae-8c0b-dbe20f03cada",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6b168686-24c9-4360-893e-efb5c00eef86",
              "leftValue": "={{ $('Get row(s) in sheet').item.json.last_blog_link }}",
              "rightValue": "={{ $json.Link }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3456,
        -14988
      ],
      "id": "803ec3bf-d561-4766-80c9-ecd28a6d126d",
      "name": "If"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\ndiv = soup.find('div', class_='blog-latest-left body-card-item')\n\n# Récupérer l'attribut data-article\ndata_article = div.get('data-article')\n\nreturn [{\"Link\": \"https://www.yealink.com/en/blog/\"+data_article}]\n\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -14796
      ],
      "id": "7dddc015-b90f-4515-856a-83a884f22e2b",
      "name": "Yealink_link"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nblog_box = soup.find('div', class_='blogs')\n# Trouver tous les éléments <a> avec l'attribut href\nlinks = blog_box.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL de base\n    base_url = \"https://www.milesight.com\"\n    first_link = links[0]['href']  # Prendre le premier href\n    full_url = base_url + first_link  # Concaténer avec l'URL de base\nelse:\n    full_url = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": full_url,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -14988
      ],
      "id": "b61776ad-3898-454a-9e94-e11d4b0232ff",
      "name": "Milesight_link"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nblog_box = soup.find('div', class_='blog-box')\n\nclear = soup.find('ul', class_='clear')\n# Trouver tous les éléments <a> avec l'attribut href\nlinks = clear.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL de base\n    base_url = \"https://www.dinstar.com/\"\n    first_link = links[0]['href']  # Prendre le premier href\n    full_url = base_url + first_link  # Concaténer avec l'URL de base\nelse:\n    full_url = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": full_url,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -15180
      ],
      "id": "d1d49fa2-751e-421a-ac99-4932ed80c504",
      "name": "Dinstar_link"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nwp = soup.find('div', class_='blogdiv')\n\n# Trouver tous les éléments <a> avec l'attribut href\nlinks = wp.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL de base\n    base_url = \"https://www.flyingvoice.com/\"\n    first_link = links[0]['href']  # Prendre le premier href\n    full_url = base_url + first_link  # Concaténer avec l'URL de base\nelse:\n    full_url = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": full_url,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -15372
      ],
      "id": "3b3d8ec4-783c-41f8-a00b-965af8e66f54",
      "name": "Flyingvoice_link"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nwp = soup.find('div', class_='wp')\n\nabout_newsL1 = soup.find('ul', class_='about-newsL1')\n# Trouver tous les éléments <a> avec l'attribut href\nlinks = about_newsL1.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL de base\n    base_url = \"https://www.fanvil.com\"\n    first_link = links[0]['href']  # Prendre le premier href\n    full_url = base_url + first_link  # Concaténer avec l'URL de base\nelse:\n    full_url = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": full_url,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -15564
      ],
      "id": "09c450d9-b0a7-434b-8b23-4261177f8232",
      "name": "Fanvil_link"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet').item.json.Brand }}",
            "last_blog_link": "={{ $json.Link }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3232,
        -14412
      ],
      "id": "4b46d787-eafe-4e49-9ae7-a2d310bbb76a",
      "name": "Update row in sheet4",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet').item.json.Brand }}",
            "last_blog_link": "={{ $json.guid }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3232,
        -16480
      ],
      "id": "a4bfda49-5cae-441c-a4ee-4490a979e2e1",
      "name": "Update row in sheet5",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6b168686-24c9-4360-893e-efb5c00eef86",
              "leftValue": "={{ $('Get row(s) in sheet').item.json.last_blog_link }}",
              "rightValue": "={{ $json.guid }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3456,
        -16012
      ],
      "id": "4d463e7b-a134-453b-adf2-4fd6d9a3f830",
      "name": "If1"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1760,
        -15428
      ],
      "id": "52f081d4-0e65-448c-91e1-0662a70d1a37",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -3680,
        -16012
      ],
      "id": "73a3e73f-c313-4e75-832f-07a6462373bd",
      "name": "Limit"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nwp = soup.find('section', id='content')\n\nabout_newsL1 = wp.find('article')\n# Trouver tous les éléments <a> avec l'attribut href  / , class_='about-newsL1'\nlinks = about_newsL1.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL\n    first_link = links[0]['href']  # Prendre le premier href\n\nelse:\n    first_link = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": first_link,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -14412
      ],
      "id": "a742df81-1824-4702-8ce5-44a9758177a9",
      "name": "3CX_link"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from bs4 import BeautifulSoup\n\n# Le code HTML en entrée (issu de l'input JSON)\nhtml_content = items[0][\"json\"][\"data\"]\n\n# Parse le HTML avec BeautifulSoup\nsoup = BeautifulSoup(html_content, \"html.parser\")\n\nblog_box = soup.find('div', class_='post-listing-simple')\n\n#clear = soup.find('ul', class_='clear')\n# Trouver tous les éléments <a> avec l'attribut href\nlinks = blog_box.find_all('a', href=True)\n\n# Si des liens sont présents, récupérer le premier (qui correspond normalement au dernier article publié)\n\n# Si des liens sont présents\nif links:\n    # Extraire le href du premier lien et le concaténer avec l'URL de base\n    base_url = \"https://www.dinstar.com/\"\n    first_link = links[0]['href']  # Prendre le premier href\nelse:\n    first_link = \"No links found\"  # Si aucun lien n'est trouvé\n\n# Retourner le résultat sous forme d'un dictionnaire JSON\nreturn [{\n    \"json\": {\n        \"Link\": first_link,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3680,
        -14604
      ],
      "id": "59694932-d797-4814-871f-898ea8d6e7ae",
      "name": "Dinstar_link2"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -4656,
        -12976
      ],
      "id": "ddedd697-ae28-4b0d-b058-1d6fdda0757d",
      "name": "Get row(s) in sheet1",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -4880,
        -12976
      ],
      "id": "e4c2d125-32e3-4428-939a-466136fe95fe",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4432,
        -12976
      ],
      "id": "14ad23d8-cbd0-4fc5-a707-e564a112b4da",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyB16h08g478dRdhwQkjeT1zo7cuL3j20xQ"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [{\n      \"parts\": [\n        {\"text\": \"{{ $json.output }}\"}\n      ]\n    }],\n    \"generationConfig\":{\"responseModalities\":[\"TEXT\",\"IMAGE\"]}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3504,
        -13552
      ],
      "id": "db1d6b1b-c75b-438a-b6dd-2bee7fb88f8c",
      "name": "HTTP Request1",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3280,
        -13552
      ],
      "id": "8dc59ad8-292a-4436-b688-dad9796892b7",
      "name": "Convert to File1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3776,
        -13440
      ],
      "id": "14205add-8a6d-445f-88a7-702e836ff06f",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "OvzWazpUQAPU8BZ9",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json[\"content fetched\"] }}\n{{ $json.last_blog_link }}",
        "options": {
          "systemMessage": "=Tu es un agent marketing chez Ennova Group au Maroc.\n\nAprès avoir consulté ce contenu de blog : {{ $json[\"content fetched\"] }} et le site associé : {{ $json.last_blog_link }}, ton objectif est de rédiger un post Facebook prêt à être publié.\n\nLe post doit :\n\nVulgariser l’essentiel du sujet de manière claire et engageante, en mentionnant la société qui développe la solution.\n\nInspirer les entrepreneurs, acheteurs et dirigeants.\n\nMontrer qu’Ennova Group comprend les enjeux du sujet.\n\nSouligner qu’Ennova est le distributeur officiel de cette marque en Afrique ({{ $json.last_blog_link }}).\n\nConclure par un appel à l’action fort et crédible :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\nContraintes de format :\n\nPas de HTML\n\nUtiliser des emojis si possible\n\nStyle fluide, humain, lisible (pas robotique)\n\nTerminer par une présentation concise d’Ennova Group et ses coordonnées\n\nAjouter 5 à 7 hashtags pertinents selon le sujet\n\nStructure du post Facebook\n\nNom de la solution ou du thème + phrase de présentation claire et engageante\n\nHook : une question ou alerte pour capter l’attention\n\nExemple : \"Vous rencontrez ce problème ?\" ou \"Attention : un détail peut tout faire échouer\"\n\nLe problème que la solution résout : de manière concrète et impactante\n\nComment ça fonctionne ? : expliquer le mécanisme ou le processus simplement\n\n3 points clés / avantages pour l’entreprise (format puces ou emojis)\n\nPhrase de renforcement de valeur\n\nExemple : \"Ennova Group vous accompagne de A à Z.\"\n\nComment l’utiliser ? : indiquer comment une entreprise cliente peut en bénéficier concrètement\n\nAppel à l’action fort :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\nPrésentation concise de Ennova Group :\n\n\"Chez Ennova Group, nous accompagnons les entreprises dans la transformation de leurs communications avec des solutions VoIP innovantes et fiables. En tant que distributeur officiel de grandes marques de téléphonie IP en Afrique, nous vous aidons à optimiser vos appels, vos réunions en ligne et votre service client, tout en réduisant vos coûts.\n\n💡 Pourquoi nous choisir ?\n\nSolutions VoIP adaptées à vos besoins\n\nInstallation et support technique professionnels\n\nExpertise et accompagnement de A à Z\"\n\nHashtags : 5 à 7 pertinents selon le sujet"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -4208,
        -13552
      ],
      "id": "2346fa9b-4f8a-4c4e-8362-652889061c17",
      "name": "AI Agent for Facebook post content",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json[\"content fetched\"] }}\n{{ $json.last_blog_link }}",
        "options": {
          "systemMessage": "Tu es un agent marketing chez Ennova Group au Maroc.\n\nAprès avoir consulté ce contenu de blog : {{ $json[\"content fetched\"] }} et le site associé : {{ $json.last_blog_link }}, ton objectif est de rédiger un post X prêt à être publié.\n\nLe post doit :\n\nVulgariser l’essentiel du sujet de manière claire et engageante, en mentionnant la société qui développe la solution.\n\nInspirer les entrepreneurs, acheteurs et dirigeants.\n\nMontrer qu’Ennova Group comprend les enjeux du sujet.\n\nSouligner qu’Ennova est le distributeur officiel de cette marque en Afrique ({{ $json.last_blog_link }}).\n\nConclure par un appel à l’action fort et crédible :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\n\nContraintes de format pour X :\n\nPas de HTML\n\nUtiliser des emojis si possible\n\nStyle fluide, humain et lisible\n\nAdapter le texte à 280 caractères maximum par tweet ou créer un thread si nécessaire\n\nTerminer par une présentation concise d’Ennova Group et ses coordonnées\n\nAjouter 3 à 5 hashtags pertinents selon le sujet\n\n\nStructure recommandée pour un tweet ou thread X\n\nNom de la solution ou thème + phrase de présentation claire et engageante\n\nHook : question ou alerte pour capter l’attention\n\nExemple : \"Vous rencontrez ce problème ?\" ou \"Attention : un détail peut tout faire échouer\"\n\nLe problème que la solution résout : concret et impactant\n\nComment ça fonctionne ? : expliquer simplement\n\n3 points clés / avantages pour l’entreprise (format puces ou emojis)\n\nPhrase de renforcement de valeur\n\nExemple : \"Ennova Group vous accompagne de A à Z.\"\n\nComment l’utiliser ? : bénéfices concrets pour l’entreprise\n\nAppel à l’action fort :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\nPrésentation concise de Ennova Group :\n\n\"Chez Ennova Group, nous accompagnons les entreprises dans la transformation de leurs communications avec des solutions VoIP innovantes et fiables. Distributeur officiel de grandes marques de téléphonie IP en Afrique, nous optimisons vos appels, réunions et service client.\"\nHashtags : 5 à 7 pertinents selon le sujet"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -4208,
        -13264
      ],
      "id": "a101c9a1-52ef-4cf7-93eb-64b43a50e5ce",
      "name": "AI Agent for X post content",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json[\"content fetched\"] }}\n{{ $json.last_blog_link }}",
        "options": {
          "systemMessage": "Tu es un agent marketing chez Ennova Group au Maroc.\n\nAprès avoir consulté ce contenu de blog : {{ $json[\"content fetched\"] }} et le site associé : {{ $json.last_blog_link }}, ton objectif est de rédiger un post Instagram prêt à être publié.\n\nLe post doit :\n\nVulgariser l’essentiel du sujet de manière claire et engageante, en mentionnant la société qui développe la solution.\n\nInspirer les entrepreneurs, acheteurs et dirigeants.\n\nMontrer qu’Ennova Group comprend les enjeux du sujet.\n\nSouligner qu’Ennova est le distributeur officiel de cette marque en Afrique ({{ $json.last_blog_link }}).\n\nConclure par un appel à l’action fort et crédible :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\n\nContraintes de format pour Instagram\n\nPas de HTML\n\nStyle fluide, humain, lisible, conversationnel\n\nUtiliser des emojis si possible\n\nTexte suffisamment court pour être lu facilement dans le fil d’actualité\n\nTerminer par une présentation concise d’Ennova Group et ses coordonnées\n\nAjouter 3 à 5 hashtags pertinents selon le sujet\n\n\nStructure recommandée du post Instagram\n\nNom de la solution ou thème + phrase de présentation claire et engageante\n\nHook : question ou alerte pour capter l’attention\n\nExemple : \"Vous rencontrez ce problème ?\" ou \"Attention : un détail peut tout faire échouer\"\n\nLe problème que la solution résout : concret et impactant\n\nComment ça fonctionne ? : expliquer le mécanisme ou processus simplement\n\n3 points clés / avantages pour l’entreprise (format puces ou emojis)\n\nPhrase de renforcement de valeur\n\nExemple : \"Ennova Group vous accompagne de A à Z.\"\n\nComment l’utiliser ? : indiquer comment une entreprise cliente peut en bénéficier concrètement\n\nAppel à l’action fort :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\nPrésentation concise de Ennova Group :\n\n\"Chez Ennova Group, nous accompagnons les entreprises dans la transformation de leurs communications avec des solutions VoIP innovantes et fiables. Distributeur officiel de grandes marques de téléphonie IP en Afrique, nous optimisons vos appels, réunions et service client.\"\n\nHashtags : 5 à 7 pertinents selon le sujet"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -4208,
        -13072
      ],
      "id": "82a9b3b3-03a3-4f14-81fe-22c09b009a70",
      "name": "AI Agent for Instagram post content",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json[\"content fetched\"] }}\n{{ $json.last_blog_link }}",
        "options": {
          "systemMessage": "Tu es un agent marketing chez Ennova Group au Maroc.\n\nAprès avoir consulté ce contenu de blog : {{ $json[\"content fetched\"] }} et le site associé : {{ $json.last_blog_link }}, ton objectif est de rédiger un article LinkedIn complet et professionnel prêt à être publié.\n\nLe post doit :\n\nVulgariser l’essentiel du sujet de manière claire et engageante, en mentionnant la société qui développe la solution.\n\nInspirer les entrepreneurs, acheteurs et dirigeants.\n\nMontrer qu’Ennova Group comprend les enjeux du sujet.\n\nSouligner qu’Ennova est le distributeur officiel de cette marque en Afrique ({{ $json.last_blog_link }}).\n\nConclure par un appel à l’action fort et crédible :\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\n\nContraintes de format pour LinkedIn\n\nPas de HTML\n\nStyle fluide, humain, lisible, conversationnel\n\nUtiliser des emojis si possible\n\nTexte suffisamment court pour être lu facilement dans le fil d’actualité\n\nTerminer par une présentation concise d’Ennova Group et ses coordonnées\n\nAjouter 3 à 5 hashtags pertinents selon le sujet\n\n\nStructure recommandée pour l’article LinkedIn\n\nTitre de l’article / Nom de la solution ou thème\n\nPhrase de présentation claire et engageante\n\nHook / Introduction\n\nQuestion ou alerte pour capter l’attention\n\nExemple : \"Vous cherchez à optimiser la gestion de vos appels sans complexité technique ?\"\n\nLe problème que la solution résout\n\nDécrire concrètement le problème et son impact pour les entreprises\n\nComment ça fonctionne ?\n\nExpliquer simplement le mécanisme ou processus de la solution\n\nAvantages clés pour l’entreprise\n\n3 points ou plus (puces ou emojis)\n\nMontrer la valeur concrète de la solution\n\nPhrase de renforcement de valeur\n\nExemple : \"Ennova Group vous accompagne de A à Z.\"\n\nComment l’utiliser ?\n\nIndiquer comment les entreprises clientes peuvent bénéficier concrètement de la solution\n\nAppel à l’action fort\n\n\"Envie d’en savoir plus ? Rendez-vous sur https://ennovagroupe.com/\n ou contactez-nous à contact@ennovagroupe.com\n | +212 (0)5 22 05 31 00.\"\n\nPrésentation concise d’Ennova Group\n\n\"Chez Ennova Group, nous accompagnons les entreprises dans la transformation de leurs communications avec des solutions VoIP innovantes et fiables. En tant que distributeur officiel de grandes marques de téléphonie IP en Afrique, nous optimisons vos appels, réunions et service client, tout en réduisant vos coûts. 💡 Pourquoi nous choisir ?\n\nSolutions VoIP adaptées à vos besoins\n\nInstallation et support technique professionnels\n\nExpertise et accompagnement de A à Z\"\n\nHashtags : 5 à 7 pertinents selon le sujet"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -4208,
        -12880
      ],
      "id": "d558efcb-d0f4-4beb-81d8-a7a6ea731381",
      "name": "AI Agent for LinkedIn post content",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyB16h08g478dRdhwQkjeT1zo7cuL3j20xQ"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [{\n      \"parts\": [\n        {\"text\": \"{{ $json.output }}\"}\n      ]\n    }],\n    \"generationConfig\":{\"responseModalities\":[\"TEXT\",\"IMAGE\"]}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3504,
        -13264
      ],
      "id": "2d6f5724-9d56-43e7-aba1-022348680ca7",
      "name": "HTTP Request5",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3280,
        -13264
      ],
      "id": "7c1a1d62-9d72-476f-9933-1658f7c2e83f",
      "name": "Convert to File",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyB16h08g478dRdhwQkjeT1zo7cuL3j20xQ"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [{\n      \"parts\": [\n        {\"text\": \"{{ $json.output }}\"}\n      ]\n    }],\n    \"generationConfig\":{\"responseModalities\":[\"TEXT\",\"IMAGE\"]}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3504,
        -13072
      ],
      "id": "49e9686e-6aca-4920-bd23-3973a686eb80",
      "name": "HTTP Request6",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3280,
        -13072
      ],
      "id": "22c132b7-4b5d-45c6-8ac1-63529247c422",
      "name": "Convert to File2",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyB16h08g478dRdhwQkjeT1zo7cuL3j20xQ"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [{\n      \"parts\": [\n        {\"text\": \"{{ $json.output }}\"}\n      ]\n    }],\n    \"generationConfig\":{\"responseModalities\":[\"TEXT\",\"IMAGE\"]}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3504,
        -12880
      ],
      "id": "552da060-fd0d-4db6-8ce7-21f413d8876f",
      "name": "HTTP Request7",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3280,
        -12880
      ],
      "id": "80fc9788-1510-4267-a158-59d1bec21498",
      "name": "Convert to File3",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A high-resolution illustration in a clean, modern style representing the concept described in {{ $json.output }}, with soft lighting, subtle gradients, balanced horizontal composition, minimalistic background, professional color palette, visually engaging without text or UI elements, optimized for X/Twitter feed display (16:9 aspect ratio, minimum resolution 1200x675 pixels, no cropping or compression issues). je veux a la sortie uniquement le prompt.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -3856,
        -13264
      ],
      "id": "8a95ed7a-ac9d-41c7-be37-944fcc31cdfa",
      "name": "X post img prompt",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A high-resolution illustration in a clean, modern blog style representing the concept described in {{ $json.output }}, with soft lighting, subtle gradients, balanced 1.91:1 composition, minimalistic background, professional color palette, visually engaging without text or UI elements, suitable as a Facebook post header or featured image (1.91:1 aspect ratio, minimum resolution 1200x630 pixels, no cropping or compression issues). je veux a la sortie uniquement le prompt.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -3856,
        -13664
      ],
      "id": "f99b2e34-8b16-4c11-8fc2-6bcda1060a02",
      "name": "Facebook post img prompt",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A high-resolution illustration in a clean, modern style representing the concept described in {{ $json.output }}, with soft lighting, subtle gradients, balanced square composition, minimalistic background, professional color palette, visually engaging without text or UI elements, optimized for Instagram feed display (1:1 aspect ratio, minimum resolution 1080x1080 pixels, no cropping or compression issues). je veux a la sortie uniquement le prompt.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -3856,
        -13072
      ],
      "id": "f050e313-46b3-42bc-bda7-34b7e9a52f65",
      "name": "Instagram post img prompt",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A high-resolution illustration in a clean, modern style representing the concept described in {{ $json.output }}, with soft lighting, subtle gradients, balanced square composition, minimalistic background, professional color palette, visually engaging without text or UI elements, optimized for Instagram feed display (1.91:1  aspect ratio, minimum resolution 1200x627 pixels, no cropping or compression issues). je veux a la sortie uniquement le prompt.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -3856,
        -12880
      ],
      "id": "8c823f07-136c-44a1-9e31-79a721250236",
      "name": "LinkedIn post img prompt",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-goog-api-key",
              "value": "AIzaSyB16h08g478dRdhwQkjeT1zo7cuL3j20xQ"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"contents\": [{\n      \"parts\": [\n        {\"text\": \"{{ $json.output }}\"}\n      ]\n    }],\n    \"generationConfig\":{\"responseModalities\":[\"TEXT\",\"IMAGE\"]}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3504,
        -12688
      ],
      "id": "5ca1ca25-ffe9-4905-beb8-70e028f31f90",
      "name": "HTTP Request8",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "binaryPropertyName": "=data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3280,
        -12688
      ],
      "id": "0129892b-119c-4b81-999c-50c1c0a08a33",
      "name": "Convert to File4",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=A high-resolution illustration in a clean, modern style representing the concept described in {{ $json['content fetched'] }}, with soft lighting, subtle gradients, balanced square composition, minimalistic background, professional color palette, visually engaging without text or UI elements, optimized for Instagram feed display (1.91:1  aspect ratio, minimum resolution 1200x627 pixels, no cropping or compression issues). je veux a la sortie uniquement le prompt.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -3856,
        -12688
      ],
      "id": "8b173858-632b-41a9-8371-1bd6a9fb14ea",
      "name": "LinkedIn post img prompt1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "name": "test",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3056,
        -12688
      ],
      "id": "9b3cc239-8d0f-4794-ae69-96a94add403b",
      "name": "Upload file",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Cljl6kRq4GyI0RDd",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet1').item.json.Brand }}",
            "blog_img": "={{ $json.webContentLink }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "blog_img",
              "displayName": "blog_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_content",
              "displayName": "facebook_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_img",
              "displayName": "facebook_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_content",
              "displayName": "X_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_img",
              "displayName": "X_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_content",
              "displayName": "instagram_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_img",
              "displayName": "instagram_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_content",
              "displayName": "linkedin_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_img",
              "displayName": "linkedin_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2832,
        -12688
      ],
      "id": "4463cea9-96b3-40d5-bd81-0d072c931449",
      "name": "Update row in sheet1",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "name": "test",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3056,
        -13264
      ],
      "id": "e2389a53-9d4a-40ba-a221-fc79338a3bdc",
      "name": "Upload file1",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Cljl6kRq4GyI0RDd",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet1').item.json.Brand }}",
            "X_img": "={{ $json.webContentLink }}",
            "X_content": "={{ $('AI Agent for X post content').item.json.output }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "blog_img",
              "displayName": "blog_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_content",
              "displayName": "facebook_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_img",
              "displayName": "facebook_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_content",
              "displayName": "X_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "X_img",
              "displayName": "X_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_content",
              "displayName": "instagram_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_img",
              "displayName": "instagram_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_content",
              "displayName": "linkedin_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_img",
              "displayName": "linkedin_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2832,
        -13264
      ],
      "id": "393fc70c-8da7-4a40-94ed-41c206d360d1",
      "name": "Update row in sheet2",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "name": "test",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3056,
        -13072
      ],
      "id": "23908a6b-1124-41aa-804a-4299a214c272",
      "name": "Upload file2",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Cljl6kRq4GyI0RDd",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet1').item.json.Brand }}",
            "blog_img": "={{ $json.webContentLink }}",
            "instagram_img": "={{ $json.webContentLink }}",
            "instagram_content": "={{ $('AI Agent for Instagram post content').item.json.output }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "blog_img",
              "displayName": "blog_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_content",
              "displayName": "facebook_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_img",
              "displayName": "facebook_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_content",
              "displayName": "X_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_img",
              "displayName": "X_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_content",
              "displayName": "instagram_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "instagram_img",
              "displayName": "instagram_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_content",
              "displayName": "linkedin_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_img",
              "displayName": "linkedin_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2832,
        -13072
      ],
      "id": "a1a816e2-7797-443b-a39e-62357209bb9e",
      "name": "Update row in sheet3",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "name": "test",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3056,
        -12880
      ],
      "id": "2aef117d-7e4a-4978-8cca-c01da12916da",
      "name": "Upload file3",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Cljl6kRq4GyI0RDd",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet1').item.json.Brand }}",
            "blog_img": "={{ $json.webContentLink }}",
            "linkedin_img": "={{ $json.webContentLink }}",
            "linkedin_content": "={{ $('AI Agent for LinkedIn post content').item.json.output }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "blog_img",
              "displayName": "blog_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_content",
              "displayName": "facebook_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_img",
              "displayName": "facebook_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_content",
              "displayName": "X_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_img",
              "displayName": "X_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_content",
              "displayName": "instagram_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_img",
              "displayName": "instagram_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_content",
              "displayName": "linkedin_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_img",
              "displayName": "linkedin_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2832,
        -12880
      ],
      "id": "db396cd1-b4aa-4240-babb-39fb9d28154b",
      "name": "Update row in sheet6",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "name": "test",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3056,
        -13552
      ],
      "id": "bde74742-bab0-462f-9d6b-fbb3e127e665",
      "name": "Upload file4",
      "retryOnFail": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "Cljl6kRq4GyI0RDd",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4",
          "mode": "list",
          "cachedResultName": "Brand Blogs Content",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1285664785,
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1LvDqnYRM5V_zannJiT5yUv9Pw1ZH1d71nIHoPTmLLP4/edit#gid=1285664785"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Brand": "={{ $('Get row(s) in sheet1').item.json.Brand }}",
            "facebook_img": "={{ $json.webContentLink }}",
            "facebook_content": "={{ $('AI Agent for Facebook post content').item.json.output }}"
          },
          "matchingColumns": [
            "Brand"
          ],
          "schema": [
            {
              "id": "Brand",
              "displayName": "Brand",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Site URL",
              "displayName": "Site URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Blog/News URL",
              "displayName": "Blog/News URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "scrapping",
              "displayName": "scrapping",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "RSS/Feed URL",
              "displayName": "RSS/Feed URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "All Blogs html class",
              "displayName": "All Blogs html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "single blog html class",
              "displayName": "single blog html class",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "element",
              "displayName": "element",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "content fetched",
              "displayName": "content fetched",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "blog_img",
              "displayName": "blog_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_blog_link",
              "displayName": "last_blog_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "facebook_content",
              "displayName": "facebook_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "facebook_img",
              "displayName": "facebook_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "X_content",
              "displayName": "X_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "X_img",
              "displayName": "X_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_content",
              "displayName": "instagram_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "instagram_img",
              "displayName": "instagram_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_content",
              "displayName": "linkedin_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "linkedin_img",
              "displayName": "linkedin_img",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2832,
        -13552
      ],
      "id": "60a21408-412e-41c8-9418-e36aedebf4d5",
      "name": "Update row in sheet7",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0CsV0GZSEqe9cKwx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 5,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2608,
        -13024
      ],
      "id": "9d81ea65-2528-4922-8a4e-ded9f8bf5e1e",
      "name": "Merge1"
    }
  ],
  "pinData": {},
  "connections": {
    "Cron (every 2h)1": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "RSS Read1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Grandstream": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Grandstream",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Flyingvoice",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Yealink",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fanvil",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dinstar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sangoma",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenVox",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Yeastar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "3CX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Milesight",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flyingvoice": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "Fanvil_link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Flyingvoice_link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dinstar_link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Milesight_link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Yealink_link",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Dinstar_link2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "3CX_link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fanvil": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dinstar": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read1": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sangoma": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenVox": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Yeastar": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3CX": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Milesight": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Yealink": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ],
        [
          {
            "node": "Update row in sheet4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Yealink_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Milesight_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dinstar_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Flyingvoice_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fanvil_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet4": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet5": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update row in sheet5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "3CX_link": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dinstar_link2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "AI Agent for Facebook post content",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent for X post content",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent for Instagram post content",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent for LinkedIn post content",
            "type": "main",
            "index": 0
          },
          {
            "node": "LinkedIn post img prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Upload file4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent for Facebook post content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Facebook post img prompt",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent for X post content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent for Instagram post content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent for LinkedIn post content",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "X post img prompt",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Instagram post img prompt",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "LinkedIn post img prompt",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "LinkedIn post img prompt1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent for Facebook post content": {
      "main": [
        [
          {
            "node": "Facebook post img prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent for X post content": {
      "main": [
        [
          {
            "node": "X post img prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Upload file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent for Instagram post content": {
      "main": [
        [
          {
            "node": "Instagram post img prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request7": {
      "main": [
        [
          {
            "node": "Convert to File3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent for LinkedIn post content": {
      "main": [
        [
          {
            "node": "LinkedIn post img prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "X post img prompt": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facebook post img prompt": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram post img prompt": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn post img prompt": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request8": {
      "main": [
        [
          {
            "node": "Convert to File4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LinkedIn post img prompt1": {
      "main": [
        [
          {
            "node": "HTTP Request8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File4": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file1": {
      "main": [
        [
          {
            "node": "Update row in sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file2": {
      "main": [
        [
          {
            "node": "Update row in sheet3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file3": {
      "main": [
        [
          {
            "node": "Update row in sheet6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file4": {
      "main": [
        [
          {
            "node": "Update row in sheet7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Upload file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File3": {
      "main": [
        [
          {
            "node": "Upload file3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet7": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Update row in sheet3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Update row in sheet6": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Update row in sheet1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e118217d-372b-43c6-9b07-6a2070ead688",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "612674cd98977dc74567f02f7faaa4bea41829545d73644a2be3b3d2e77ca778"
  },
  "id": "wDiTJVfpSXI0o31T",
  "tags": []
}